package main

func mainI(){

}


// 同一个操作，作用于不同的对象，会产生不同的结果。

// work-> phone camera

/*

我们经常说：“要面向接口编程，而不是面向实现编程”。
多态性，也就要求我们面向接口编程。

不同的对象，相同的接口，但因为多态，有了不同的实现。
这样面向接口编程，就降低了耦合度，很灵活。

*/

// 怎么使用这个接口--- 多态的体现

// 一应用场景一 使用接口的方法 就是我定义方法 你给我实现这个方法就行 这种情景会比较多

// 二应用场景二 将接口当参数传入 按照duck typing谁实现这个接口也就是这个接口 -- 多态的体现


// 所以总的说接口的使用就是当做参数传递 或者实例 利用 duck typing的理论就是这个结构体实际就是可以代表成这个接口


// 接口可以理解成一个对象开放这个接口（就是成为它的接口 比如我手机通过 USB插入计算机的接口 你可以认为这个手机成为了计算机同时保留手机的能力）